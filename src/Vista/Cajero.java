package Vista;

import Controlador.Conexion;
import Modelo.Sesion;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author SamyAG
 */
public class Cajero extends javax.swing.JFrame {

    Conexion con1 = Conexion.getInstance();
    Connection conet;
    DefaultTableModel modelo;
    private int idCajero;
    private Timer timer;
    private JDateChooser jDateChooser1;

    /**
     * Creates new form Cajero
     */
    public Cajero() {
        initComponents();
        consultar();
        eti1.setVisible(false);
        eti2.setVisible(false);
        eti3.setVisible(false);
        TraCredito.setVisible(false);
        TarDebito.setVisible(false);
        OtraPago.setVisible(false);
        eti4.setVisible(false);
        BCalzado.setVisible(false);
    }

    public Cajero(int idCajero) {
        this.idCajero = idCajero;
        initComponents();
        consultar();
        cargarTransaccionesEnTabla();
        iniciarMonitoreoInventario();
        generarReporteZapatosVendidos();
        String[] puestos = {" ", "Tenis Dama", "Tenis Caballero", "Tenis Niño", "Tenis Niña",
            "Zapato Dama", "Zapato Caballero", "Zapato Niño", "Zapato Niña",
            "Bota Dama", "Bota Caballero", "Bota Niño", "Bota Niña",
            "Zandalia Dama", "Zandalia Caballero", "Zandalia Niño", "Zandalia Niña"};
        BCalzado.setModel(new DefaultComboBoxModel<>(puestos));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Modelo = new javax.swing.JTextField();
        Marca = new javax.swing.JTextField();
        Cantidad = new javax.swing.JTextField();
        Precio = new javax.swing.JTextField();
        StockDisponible = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Añadir = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        btnGenerarVenta = new javax.swing.JButton();
        TotalPagar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        comboMetodoPago = new javax.swing.JComboBox<>();
        MontoProporcionado = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        idZapato = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        CorteCaja = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        DiaCorteCaja = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        Efectivo = new javax.swing.JTextField();
        eti2 = new javax.swing.JLabel();
        TraCredito = new javax.swing.JTextField();
        eti3 = new javax.swing.JLabel();
        TarDebito = new javax.swing.JTextField();
        OtraPago = new javax.swing.JTextField();
        eti1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        TotalVentas = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jPanel6 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtTransaccionID = new javax.swing.JTextField();
        txtCantidadDevolver = new javax.swing.JTextField();
        btnDevolucion = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        Buscar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaZapatos = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        eti4 = new javax.swing.JLabel();
        BCodigo = new javax.swing.JTextField();
        BModelo = new javax.swing.JTextField();
        BMarca = new javax.swing.JTextField();
        BColor = new javax.swing.JTextField();
        BTalla = new javax.swing.JTextField();
        BCantidad = new javax.swing.JTextField();
        BPrecio = new javax.swing.JTextField();
        BCalzado = new javax.swing.JComboBox<>();
        Buscar = new javax.swing.JButton();
        Limpiar = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        btCancelar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1502, 780));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(482, 745));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/Rectangle2.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/Rectangle3.png"))); // NOI18N

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 55)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Chedy's");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/clic.png"))); // NOI18N
        jLabel5.setText("jLabel5");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/rectangulo.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(240, 240));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(103, 103, 103)
                .addComponent(jLabel3)
                .addGap(57, 57, 57))
        );

        jTabbedPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTabbedPane1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Modelo");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Marca");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Cantidad");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Precio");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Stock disponible");

        Modelo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ModeloKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ModeloKeyReleased(evt);
            }
        });

        Marca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarcaActionPerformed(evt);
            }
        });

        Cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CantidadActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "CODIGO", "MODELO", "MARCA", "CANTIDAD", "PRECIO U", "PRECIO TOTAL"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        Añadir.setBackground(new java.awt.Color(83, 182, 81));
        Añadir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Añadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/nuevo.GIF"))); // NOI18N
        Añadir.setText("Añadir");
        Añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirActionPerformed(evt);
            }
        });

        Eliminar.setBackground(new java.awt.Color(255, 0, 51));
        Eliminar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/cancelar.png"))); // NOI18N
        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        btnGenerarVenta.setBackground(new java.awt.Color(83, 182, 81));
        btnGenerarVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnGenerarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/pagos.png"))); // NOI18N
        btnGenerarVenta.setText("Generar Venta");
        btnGenerarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarVentaActionPerformed(evt);
            }
        });

        TotalPagar.setText("0.00");
        TotalPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalPagarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Total a Pagar");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Monto proporcionado");

        comboMetodoPago.setBackground(new java.awt.Color(83, 182, 81));
        comboMetodoPago.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        comboMetodoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", " ", " " }));

        MontoProporcionado.setText("0.00");
        MontoProporcionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MontoProporcionadoActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Metodo de pago");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setText("Codigo");

        idZapato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idZapatoActionPerformed(evt);
            }
        });
        idZapato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idZapatoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(idZapato, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(Modelo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(Marca, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(Precio, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(StockDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(12, 12, 12)
                                .addComponent(Añadir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Eliminar))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnGenerarVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(TotalPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(MontoProporcionado, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel26))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Marca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StockDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Añadir)
                    .addComponent(Eliminar)
                    .addComponent(idZapato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(MontoProporcionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerarVenta)
                    .addComponent(TotalPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(82, 82, 82))
        );

        jTabbedPane1.addTab("Caja", jPanel4);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        CorteCaja.setBackground(new java.awt.Color(83, 182, 81));
        CorteCaja.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CorteCaja.setText("Generar Corte de caja");
        CorteCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorteCajaActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "NUM DE TICKET", "MODELO", "PRECIO", "CANTIDAD", "FORMA DE PAGO", "ID CAJERO", "TOTAL", "FECHA COMPRA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Corte de caja del dia ");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Total en Efectivo");

        Efectivo.setText("  ");
        Efectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EfectivoActionPerformed(evt);
            }
        });

        eti2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        eti2.setText("Total tarjeta de credito");

        TraCredito.setText("                     ");

        eti3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        eti3.setText("Total tarjeta de debito");

        TarDebito.setText("                 ");

        OtraPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OtraPagoActionPerformed(evt);
            }
        });

        eti1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        eti1.setText("Total otra forma de pago");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 0, 51));
        jLabel19.setText("Total de ventas");

        jButton2.setBackground(new java.awt.Color(83, 182, 81));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Actualizar tabla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel25.setText("Ventas Hechas");

        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });
        jDateChooser2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jDateChooser2KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel19))
                        .addGap(73, 73, 73)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DiaCorteCaja)
                                .addComponent(Efectivo, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eti2)
                                    .addComponent(eti3))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TraCredito, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(TarDebito)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(eti1)
                                .addGap(27, 27, 27)
                                .addComponent(OtraPago, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(225, 225, 225)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CorteCaja)
                                    .addComponent(jLabel25))))
                        .addGap(52, 52, 52)
                        .addComponent(jButton2)))
                .addGap(0, 123, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CorteCaja)
                        .addComponent(jButton2)))
                .addGap(35, 35, 35)
                .addComponent(jLabel25)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(DiaCorteCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eti1)
                    .addComponent(OtraPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(Efectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eti2)
                    .addComponent(TraCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eti3)
                    .addComponent(TarDebito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(TotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        jTabbedPane1.addTab("Corte de caja", jPanel5);

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("Numero de ticket");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("Cantidad de articulos a devolver");

        btnDevolucion.setBackground(new java.awt.Color(83, 182, 81));
        btnDevolucion.setText("Procesar devolucion");
        btnDevolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolucionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCantidadDevolver, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTransaccionID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(btnDevolucion)))
                .addContainerGap(433, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtTransaccionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21)
                    .addComponent(txtCantidadDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(btnDevolucion)
                .addContainerGap(349, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Devoluciones", jPanel6);

        jPanel7.setBackground(new java.awt.Color(153, 153, 153));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "MODELO", "VENTAS TOTALES"
            }
        ));
        jScrollPane5.setViewportView(jTable4);

        jButton4.setBackground(new java.awt.Color(83, 182, 81));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("Actualizar reporte");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel24.setText("Reporte de zapatos mas vendidos ");

        Buscar1.setBackground(new java.awt.Color(0, 0, 0));
        Buscar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Buscar1.setForeground(new java.awt.Color(255, 255, 255));
        Buscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/Buscar_1.png"))); // NOI18N
        Buscar1.setText("Buscar");
        Buscar1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 153)));
        Buscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buscar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel24)
                        .addGap(75, 75, 75)
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(Buscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jButton4)))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel24)
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Buscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(jButton4)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reporte de zapatos", jPanel7);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        TablaZapatos.setBackground(new java.awt.Color(204, 204, 204));
        TablaZapatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Modelo", "Marca", "Color", "Talla", "Cantidad", "Precio", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaZapatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaZapatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaZapatos);

        jButton3.setBackground(new java.awt.Color(83, 182, 81));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Actualizar Tabla");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel23.setText("Visualizacion de inventario");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setText("Codigo");

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setText("Modelo");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setText("Marca");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText("Color");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setText("Talla");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel32.setText("Cantidad");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel33.setText("Precio");

        eti4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        eti4.setText("Tipo");

        BCalzado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tenis Dama", "Tenis Caballero", "Zapato Dama", "Zapato Niño" }));
        BCalzado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCalzadoActionPerformed(evt);
            }
        });

        Buscar.setBackground(new java.awt.Color(0, 0, 0));
        Buscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Buscar.setForeground(new java.awt.Color(255, 255, 255));
        Buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/Buscar_1.png"))); // NOI18N
        Buscar.setText("Buscar");
        Buscar.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 153)));
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        Limpiar.setBackground(new java.awt.Color(0, 0, 0));
        Limpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Limpiar.setForeground(new java.awt.Color(255, 255, 255));
        Limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/escoba-removebg-preview (1).png"))); // NOI18N
        Limpiar.setText("Limpiar");
        Limpiar.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 153)));
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(jLabel23))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(391, 391, 391)
                        .addComponent(jButton3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(BCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(BModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(BMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addComponent(BColor, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(BTalla, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(BCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel33)
                                    .addComponent(BPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eti4)
                                    .addComponent(BCalzado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 53, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(eti4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BTalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BCalzado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(44, 44, 44))
        );

        jTabbedPane1.addTab("inventario", jPanel3);

        jPanel8.setBackground(new java.awt.Color(51, 51, 51));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Selecciona el Documento para ver a los provedores.");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addContainerGap(567, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addContainerGap(559, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Proveedores", jPanel8);

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 55)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Zapateria Chedy's");

        btCancelar.setBackground(new java.awt.Color(83, 182, 81));
        btCancelar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/Salir.png"))); // NOI18N
        btCancelar.setText("Salir");
        btCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(153, 255, 51), null, null));
        btCancelar.setBorderPainted(false);
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 255, 102));
        jButton1.setText("Generar exel");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 993, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addGap(25, 25, 25)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TablaZapatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaZapatosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaZapatosMouseClicked

    private void TotalPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalPagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TotalPagarActionPerformed

    private boolean validarIdCajero(int idCajero) {
        String query = "SELECT COUNT(*) FROM Cajeros WHERE ID = ?";
        try (Connection conn = con1.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, idCajero);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Retorna true si el cajero existe
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al validar el ID del cajero: " + e.getMessage());
        }
        return false; // Si algo falla, asumimos que el ID no es válido
    }


    private void btnGenerarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarVentaActionPerformed

        Connection conn = null;
        try {
            // Validar método de pago seleccionado
            String formaPago = (String) comboMetodoPago.getSelectedItem();
            if (formaPago == null) {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado un método de pago.");
                return;
            }

            // Validar si hay productos en la tabla
            DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
            int rowCount = modeloTabla.getRowCount();
            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "No hay productos en la tabla para procesar la venta.");
                return;
            }

            // Validar total a pagar y monto proporcionado
            double totalPagar = Double.parseDouble(TotalPagar.getText());
            double montoProporcionado;
            try {
                montoProporcionado = Double.parseDouble(MontoProporcionado.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, ingresa un monto válido proporcionado.");
                return;
            }

            if (montoProporcionado < totalPagar) {
                JOptionPane.showMessageDialog(this, "El monto proporcionado es menor que el total a pagar.");
                return;
            }

            // Validar que el idCajero sea válido
            int idCajero = Sesion.idCajero; // Accede directamente a la variable
            // Implementar esta función para obtener el ID del cajero
            if (!validarIdCajero(idCajero)) {
                JOptionPane.showMessageDialog(this, "El ID del cajero no es válido o no existe en la base de datos.");
                return;
            }

            conn = Conexion.getInstance().getConnection(); // Obtener la conexión
            if (conn == null || conn.isClosed()) {
                JOptionPane.showMessageDialog(this, "Error: No se pudo establecer la conexión con la base de datos.");
                return; // Salir si no hay conexión
            }

            conn.setAutoCommit(false); // Iniciar transacción
            int[] transactionIds = new int[rowCount]; // Array para almacenar los IDs de las transacciones

            for (int i = 0; i < rowCount; i++) {
                // Recuperar datos de la tabla
                String modelo = (String) modeloTabla.getValueAt(i, 1);
                Object precioObj = modeloTabla.getValueAt(i, 4);
                Object cantidadObj = modeloTabla.getValueAt(i, 3);

                if (modelo == null || precioObj == null || cantidadObj == null) {
                    continue; // Salta esta iteración si algún valor es nulo
                }

                double precio = ((Number) precioObj).doubleValue();
                int cantidad = ((Number) cantidadObj).intValue();
                double total = cantidad * precio;

                // Insertar transacción y almacenar el ID
                transactionIds[i] = insertarTransaccion(modelo, precio, cantidad, formaPago, idCajero, total, conn);
            }

            conn.commit(); // Confirmar transacción
            generarNotaDeVenta(transactionIds, montoProporcionado, totalPagar); // Generar nota de venta

            // Reiniciar interfaz
            modeloTabla.setRowCount(0);
            actualizarTotalPagar();
            MontoProporcionado.setText("0.00");
            JOptionPane.showMessageDialog(this, "Venta procesada y registrada exitosamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al procesar la venta: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGenerarVentaActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para eliminar.");
            return;
        }

        DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
        String modelo = (String) modeloTabla.getValueAt(selectedRow, 1);
        int cantidad = (Integer) modeloTabla.getValueAt(selectedRow, 3);
        double precioTotal = (Double) modeloTabla.getValueAt(selectedRow, 5);

        if (!devolverStock(modelo, cantidad, precioTotal)) {
            return; // Si hay un error al devolver el stock, detiene la ejecución
        }

        modeloTabla.removeRow(selectedRow);
        actualizarTotalPagar(); // Actualiza el total después de eliminar la fila
    }//GEN-LAST:event_EliminarActionPerformed

    private void AñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirActionPerformed
        String modelo = Modelo.getText().trim();
        String marca = Marca.getText().trim();
        double precio = 0;
        int cantidad = 0;
        int stock = 0;
        int idZap = 0;

        // Intentar convertir el texto del stock disponible a número
        try {
            stock = Integer.parseInt(StockDisponible.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El stock debe ser un valor numérico.");
            return; // Salir si el stock no es un número
        }

        // Intentar convertir el precio y la cantidad de texto a números
        try {
            precio = Double.parseDouble(Precio.getText().trim());
            cantidad = Integer.parseInt(Cantidad.getText().trim());
            idZap = Integer.parseInt(idZapato.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa valores numéricos válidos para precio y cantidad.");
            return; // Salir del método si hay error en la conversión de números
        }

        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor que cero.");
            return; // Salir del método si la cantidad no es válida
        }

        if (cantidad > stock) {
            JOptionPane.showMessageDialog(this, "La cantidad deseada supera el stock disponible.");
        } else {
            double precioTotal = precio * cantidad;

            // Añadir fila a la parte superior de la tabla
            DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
            modeloTabla.insertRow(0, new Object[]{idZap, modelo, marca, cantidad, precio, precioTotal});

            // Actualizar stock en la base de datos
            actualizarStock(modelo, stock - cantidad);

            // Limpiar los campos después de añadir
            Modelo.setText("");
            Marca.setText("");
            Cantidad.setText("");
            Precio.setText("");
            StockDisponible.setText("");
            idZapato.setText("");
        }
        actualizarTotalPagar();

 /*String modelo = Modelo.getText().trim();
        String marca = Marca.getText().trim();
        double precio = 0;
        int cantidad = 0;
        int stock = 0;
        int idZap = 0;

        // Intentar convertir las entradas a números
        try {
            stock = Integer.parseInt(StockDisponible.getText().trim());
            precio = Double.parseDouble(Precio.getText().trim());
            cantidad = Integer.parseInt(Cantidad.getText().trim());
            idZap = Integer.parseInt(idZapato.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa valores numéricos válidos para el stock, precio, cantidad y código del zapato.");
            return; // Salir si hay error en la conversión
        }

        // Validaciones de negocio
        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor que cero.");
            return;
        }

        if (cantidad > stock) {
            JOptionPane.showMessageDialog(this, "La cantidad deseada supera el stock disponible.");
            return;
        }

        DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
        boolean encontrado = false;

        // Buscar si el producto ya está en la tabla
        for (int i = 0; i < modeloTabla.getRowCount(); i++) {
            int idExistente = (int) modeloTabla.getValueAt(i, 0); // Columna 0: ID del zapato
            if (idExistente == idZap) {
                // Si ya existe, actualizar cantidad y precio total
                int cantidadExistente = (int) modeloTabla.getValueAt(i, 3); // Columna 3: Cantidad
                int nuevaCantidad = cantidadExistente + cantidad;

                modeloTabla.setValueAt(nuevaCantidad, i, 3); // Actualizar cantidad
                modeloTabla.setValueAt(nuevaCantidad * precio, i, 5); // Columna 5: Precio total
                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            // Si no existe, añadir una nueva fila
            double precioTotal = precio * cantidad;
            modeloTabla.addRow(new Object[]{idZap, modelo, marca, cantidad, precio, precioTotal});
        }

        // Actualizar el stock en la base de datos
        actualizarStock(modelo, stock - cantidad);

        // Limpiar los campos de entrada
        Modelo.setText("");
        Marca.setText("");
        Cantidad.setText("");
        Precio.setText("");
        StockDisponible.setText("");
        idZapato.setText("");

        // Actualizar el total a pagar
        actualizarTotalPagar();*/
        
 
    }//GEN-LAST:event_AñadirActionPerformed

    private void MarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarcaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MarcaActionPerformed

    private void ModeloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ModeloKeyReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_ModeloKeyReleased
//////////Acacambio
    private void ModeloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ModeloKeyPressed

    }//GEN-LAST:event_ModeloKeyPressed

    private void EfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EfectivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EfectivoActionPerformed

    private void CorteCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CorteCajaActionPerformed
        // Mostrar un diálogo para confirmar el corte de caja
        // Mostrar un diálogo para confirmar el corte de caja
        int confirmResult = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea realizar el corte de caja?", "Confirmar Corte de Caja", JOptionPane.YES_NO_OPTION);
        if (confirmResult == JOptionPane.YES_OPTION) {
            if (jDateChooser2 == null) {
                jDateChooser2 = new JDateChooser(); // Inicializa el objeto
            }
            Date selectedDate;
            selectedDate = jDateChooser2.getDate();
            if (selectedDate == null) {
                JOptionPane.showMessageDialog(this, "No se seleccionó ninguna fecha.");
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fechaSeleccionada = sdf.format(selectedDate);

            // Realiza el corte de caja
            realizarCorteCaja1(fechaSeleccionada);
            // Actualiza los campos de texto con los resultados del corte de caja
            DiaCorteCaja.setText(fechaSeleccionada);
            JOptionPane.showMessageDialog(this, "Corte de caja Realizado.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_CorteCajaActionPerformed

    private void btnDevolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolucionActionPerformed
        int transactionId;
        int cantidadDevolver;

        try {
            transactionId = Integer.parseInt(txtTransaccionID.getText());
            cantidadDevolver = Integer.parseInt(txtCantidadDevolver.getText());

            if (cantidadDevolver <= 0) {
                JOptionPane.showMessageDialog(this, "La cantidad a devolver debe ser mayor que cero.");
                return;
            }

            realizarDevolucion(transactionId, cantidadDevolver);
            txtTransaccionID.setText("");
            txtCantidadDevolver.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos para el ID de transacción y la cantidad a devolver.");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_btnDevolucionActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        consultar();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cargarTransaccionesEnTabla();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        generarReporteZapatosVendidos();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        // TODO add your handling code here:
        Login login = new Login();
        login.setVisible(true);
        this.dispose();       // TODO add your handling code here:
    }//GEN-LAST:event_btCancelarActionPerformed

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        if ("date".equals(evt.getPropertyName())) {
            cargarTransaccionesEnTablaPorFecha();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void idZapatoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idZapatoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String idText = idZapato.getText().trim();
            if (!idText.isEmpty()) {
                try {
                    int id = Integer.parseInt(idText);
                    actualizarCampos(id);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.");
                }
            } else {
                Modelo.setText("");
                Marca.setText("");
                Precio.setText("");
                StockDisponible.setText("");
            }
        }
    }//GEN-LAST:event_idZapatoKeyPressed

    private void jDateChooser2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateChooser2KeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_jDateChooser2KeyPressed

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        if ("date".equals(evt.getPropertyName())) {
            cargarTransaccionesEnTablaPorFecha();  // Llama al método que carga los datos en la tabla
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        conet = con1.getConnection();

        // Verificar que BCodigo contenga solo números enteros si no está vacío
        if (!BCodigo.getText().trim().isEmpty() && !BCodigo.getText().trim().matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa solo números en el campo de código.", "Error de entrada en Código", JOptionPane.ERROR_MESSAGE);
            BCodigo.requestFocus();
            return;
        }

        // Verificar que BTalla contenga solo números decimales si no está vacío
        if (!BTalla.getText().trim().isEmpty() && !BTalla.getText().trim().matches("\\d+(\\.\\d+)?")) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa solo números en el campo de talla.", "Error de entrada en Talla", JOptionPane.ERROR_MESSAGE);
            BTalla.requestFocus();
            return;
        }

        // Verificar que BPrecio contenga solo números decimales si no está vacío
        if (!BPrecio.getText().trim().isEmpty() && !BPrecio.getText().trim().matches("\\d+(\\.\\d+)?")) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa solo números en el campo de precio.", "Error de entrada en Precio", JOptionPane.ERROR_MESSAGE);
            BPrecio.requestFocus();
            return;
        }

        // Verificar que BCantidad contenga solo números enteros si no está vacío
        if (!BCantidad.getText().trim().isEmpty() && !BCantidad.getText().trim().matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa solo números enteros en el campo de cantidad.", "Error de entrada en Cantidad", JOptionPane.ERROR_MESSAGE);
            BCantidad.requestFocus();
            return;
        }

        // Preparar la consulta SQL básica
        StringBuilder sql = new StringBuilder("SELECT Estilo, Modelo, Marca, Color, Talla, Cantidad, Precio, Tipo FROM zapato WHERE 1=1");

        // Agregar condiciones según los campos que no estén vacíos
        if (!BCodigo.getText().trim().isEmpty()) {
            sql.append(" AND Estilo = ").append(BCodigo.getText().trim());
        }
        if (!BModelo.getText().trim().isEmpty()) {
            sql.append(" AND Modelo LIKE '%").append(BModelo.getText().trim()).append("%'");
        }
        if (!BMarca.getText().trim().isEmpty()) {
            sql.append(" AND Marca LIKE '%").append(BMarca.getText().trim()).append("%'");
        }
        if (!BTalla.getText().trim().isEmpty()) {
            sql.append(" AND Talla = ").append(BTalla.getText().trim());
        }
        if (!BColor.getText().trim().isEmpty()) {
            sql.append(" AND Color LIKE '%").append(BColor.getText().trim()).append("%'");
        }
        if (!BCantidad.getText().trim().isEmpty()) {
            sql.append(" AND Cantidad = ").append(BCantidad.getText().trim());
        }
        if (!BPrecio.getText().trim().isEmpty()) {
            sql.append(" AND Precio = ").append(BPrecio.getText().trim());
        }
        if (BCalzado.getSelectedIndex() > 0) {
            sql.append(" AND Tipo = '").append(BCalzado.getSelectedItem().toString()).append("'");
        }

        try {
            PreparedStatement statement = conet.prepareStatement(sql.toString());
            ResultSet result = statement.executeQuery();
            DefaultTableModel modelo = (DefaultTableModel) TablaZapatos.getModel();
            modelo.setRowCount(0);  // Limpiar la tabla

            // Rellenar la tabla con los resultados de la consulta
            while (result.next()) {
                Object[] row = {
                    result.getInt("Estilo"),
                    result.getString("Modelo"),
                    result.getString("Marca"),
                    result.getString("Color"),
                    result.getDouble("Talla"),
                    result.getInt("Cantidad"),
                    result.getDouble("Precio"),
                    result.getString("Tipo")
                };
                modelo.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BuscarActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        // Limpiar todos los JTextField
        BCodigo.setText("");
        BModelo.setText("");
        BMarca.setText("");
        BTalla.setText("");
        BColor.setText("");
        BCantidad.setText("");
        BPrecio.setText("");

        // Restablecer el JComboBox al primer ítem
        BCalzado.setSelectedIndex(0);

    }//GEN-LAST:event_LimpiarActionPerformed

    private void Buscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buscar1ActionPerformed
        buscarModelosMasVendidos();
        // TODO add your handling code here:
    }//GEN-LAST:event_Buscar1ActionPerformed

    private void MontoProporcionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MontoProporcionadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MontoProporcionadoActionPerformed

    private void idZapatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idZapatoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idZapatoActionPerformed

    private void BCalzadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCalzadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BCalzadoActionPerformed

    private void OtraPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OtraPagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OtraPagoActionPerformed

    private void CantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CantidadActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_CantidadActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
      exportarProveedoresAExcel();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked
    
    
   private void exportarProveedoresAExcel() {
    // Definir la ruta completa para el archivo Excel
    //String excelFilePath = "C:\\Users\\zarat\\OneDrive\\Documentos\\mañana-final\\Proveedores.xlsx";
 String excelFilePath = "D:\\exel\\Proveedores.xlsx";
    System.out.println("Archivo a guardar en: " + excelFilePath);  // Depuración

    String sql = "SELECT RFC, Nombre, Apellido_Paterno, Apellido_Materno, Numero_Telefono, Email, NumeroLote, Fecha FROM Proveedor";

    try (Connection conet = Conexion.getInstance().getConnection();
         PreparedStatement statement = conet.prepareStatement(sql);
         ResultSet resultSet = statement.executeQuery();
         Workbook workbook = new XSSFWorkbook()) {

        Sheet sheet = workbook.createSheet("Proveedores");

        // Crear encabezados
        Row headerRow = sheet.createRow(0);
        String[] columnHeaders = {
            "RFC", "Nombre", "Apellido Paterno", "Apellido Materno", 
            "Teléfono", "Email", "Lote", "Fecha"
        };

        for (int i = 0; i < columnHeaders.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columnHeaders[i]);
            CellStyle style = workbook.createCellStyle();
            Font font = workbook.createFont();
            font.setBold(true);
            style.setFont(font);
            cell.setCellStyle(style);
        }

        // Rellenar los datos de la tabla
        int rowIndex = 1;
        while (resultSet.next()) {
            Row row = sheet.createRow(rowIndex++);
            row.createCell(0).setCellValue(resultSet.getString("RFC"));
            row.createCell(1).setCellValue(resultSet.getString("Nombre"));
            row.createCell(2).setCellValue(resultSet.getString("Apellido_Paterno"));
            row.createCell(3).setCellValue(resultSet.getString("Apellido_Materno"));
            row.createCell(4).setCellValue(resultSet.getString("Numero_Telefonico"));
            row.createCell(5).setCellValue(resultSet.getString("Email"));
            row.createCell(6).setCellValue(resultSet.getString("Numero_Lote"));
            row.createCell(7).setCellValue(resultSet.getDate("Fecha").toString());
        }

        // Autoajustar el ancho de las columnas
        for (int i = 0; i < columnHeaders.length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Escribir el archivo Excel
        try (FileOutputStream fileOut = new FileOutputStream(excelFilePath)) {
            workbook.write(fileOut);
            fileOut.flush();  // Asegurarse de que los datos se escriben correctamente
            JOptionPane.showMessageDialog(this, "Archivo Excel generado exitosamente en: " + excelFilePath);
        } catch (IOException ioException) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo Excel: " + ioException.getMessage(), "Error de escritura", JOptionPane.ERROR_MESSAGE);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al generar el archivo Excel: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    
    
    
    private void consultar() {
        conet = con1.getConnection();
        String sql = "SELECT Estilo, Modelo, Marca, Color, Talla, Cantidad, Precio, Tipo FROM Zapato";
        try {
            if (conet == null || conet.isClosed()) { // Verifica si la conexión está cerrada
                Conexion.getInstance().reconnect(); // Intenta reconectar
                conet = Conexion.getInstance().getConnection(); // Obtiene la nueva conexión
                if (conet == null || conet.isClosed()) { // Verifica nuevamente si la conexión está cerrada
                    throw new SQLException("No se pudo reconectar a la base de datos.");
                }
            }

            PreparedStatement statement = conet.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            // Se utiliza DefaultTableModel y fireTableDataChanged() para mejorar la velocidad de actualización
            modelo = (DefaultTableModel) TablaZapatos.getModel();
            modelo.setRowCount(0);

            while (result.next()) {
                Object[] row = {
                    result.getInt("Estilo"),
                    result.getString("Modelo"),
                    result.getString("Marca"),
                    result.getString("Color"),
                    result.getDouble("Talla"),
                    result.getInt("Cantidad"),
                    result.getDouble("Precio"),
                    result.getString("Tipo")
                };
                modelo.addRow(row);
            }

            // Notifica a la JTable que los datos han cambiado
            modelo.fireTableDataChanged();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al consultar la base de datos: " + e.getMessage());
        }
    }

    private void actualizarCampos(int id) {
        String sql = "SELECT Modelo, Marca, Precio, Cantidad FROM Zapato WHERE Estilo = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = con1.getConnection();
            if (conn == null || conn.isClosed()) { // Verifica si la conexión está cerrada
                Conexion.getInstance().reconnect(); // Intenta reconectar
                conn = Conexion.getInstance().getConnection(); // Obtiene la nueva conexión
                if (conn == null || conn.isClosed()) { // Verifica nuevamente si la conexión está cerrada
                    throw new SQLException("No se pudo reconectar a la base de datos.");
                }
            }

            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                Modelo.setText(rs.getString("Modelo"));
                Marca.setText(rs.getString("Marca"));
                Precio.setText(String.format("%.2f", rs.getDouble("Precio")));
                StockDisponible.setText(String.valueOf(rs.getInt("Cantidad")));
            } else {
                JOptionPane.showMessageDialog(this, "Codigo no encontrado.");
                Modelo.setText("");
                Marca.setText("");
                Precio.setText("");
                StockDisponible.setText("");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al consultar la base de datos: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }

    private void actualizarStock(String modelo, int nuevoStock) {
        String sql = "UPDATE zapato SET Cantidad = ? WHERE Modelo = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        try {
            conn = Conexion.getInstance().getConnection(); // Obtiene la conexión
            if (conn == null || conn.isClosed()) { // Verifica si la conexión está cerrada
                JOptionPane.showMessageDialog(this, "Error: La conexión con la base de datos está cerrada. Intentando reconectar...");
                Conexion.getInstance().reconnect(); // Intenta reconectar
                conn = Conexion.getInstance().getConnection(); // Obtiene la nueva conexión
                if (conn == null || conn.isClosed()) { // Verifica nuevamente si la conexión está cerrada
                    throw new SQLException("No se pudo reconectar a la base de datos.");
                }
            }
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, nuevoStock);
            pstmt.setString(2, modelo);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Actualizar el stock falló, ninguna fila afectada.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar el stock: " + e.getMessage());
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close(); // Cierra el PreparedStatement si no es null
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al cerrar PreparedStatement: " + e.getMessage());
            }
        }
    }

    private boolean devolverStock(String modelo, int cantidadDevuelta, double precioTotal) {
        try (Connection conn = Conexion.getInstance().getConnection(); PreparedStatement pstmt = conn.prepareStatement("UPDATE Zapato SET Cantidad = Cantidad + ? WHERE Modelo = ?")) {
            pstmt.setInt(1, cantidadDevuelta);
            pstmt.setString(2, modelo);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                JOptionPane.showMessageDialog(this, "Error al devolver el stock, ninguna fila afectada.");
                return false;
            }
            return true;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar el stock: " + e.getMessage());
            return false;
        }
    }

    private void actualizarTotalPagar() {
        DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
        double total = 0.0;
        if (modeloTabla != null) {
            for (int i = 0; i < modeloTabla.getRowCount(); i++) {
                Object valorPrecioTotal = modeloTabla.getValueAt(i, 5); // Índice 5 para la columna de precio total
                if (valorPrecioTotal != null) {
                    total += ((Number) valorPrecioTotal).doubleValue();
                }
            }
            TotalPagar.setText(String.format("%.2f", total));
        } else {
            System.err.println("Error: Modelo de tabla no disponible.");
        }
    }

    /*
    private void generarNotaDeVenta(int[] transactionIds, double montoProporcionado, double totalPagar) {
    if (jTable1 == null || jTable1.getModel() == null) {
        JOptionPane.showMessageDialog(this, "Error: La tabla no está inicializada.");
        return;
    }

    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    String fechaActual = sdf.format(new Date());
    String emailCajero = obtenerEmailCajero(idCajero);
    StringBuilder nota = new StringBuilder();
    nota.append("NOTA DE VENTA\n");
    nota.append("Fecha: ").append(fechaActual).append("\n");
    nota.append("Email del Cajero: ").append(emailCajero).append("\n");
    nota.append("----------------------------------------------------------\n");
    nota.append(String.format("%-10s %-15s %-6s %-10s %-10s %-10s\n", "MODELO", "MARCA", "CANT", "PRECIO U.", "TOTAL", "TICKET ID"));

    DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
    double sumaTotal = 0;

    for (int i = 0; i < modeloTabla.getRowCount(); i++) {
        // Ignorar la primera columna (Código)
        String modelo = safeGetString(modeloTabla, i, 1);
        String marca = safeGetString(modeloTabla, i, 2);
        Integer cantidad = safeGetInteger(modeloTabla, i, 3);
        Double precio = safeGetDouble(modeloTabla, i, 4);
        if (modelo == null || marca == null || cantidad == null || precio == null) {
            continue;
        }
        double total = cantidad * precio;
        sumaTotal += total;
        nota.append(String.format("%-14s %-17s %-10d %-10.2f %-15.2f %-10d\n", modelo, marca, cantidad, precio, total, transactionIds[i]));
    }

    double cambio = montoProporcionado - totalPagar;

    nota.append("----------------------------------------------------------\n");
    nota.append(String.format("Total a pagar: $%.2f\n", sumaTotal));
    nota.append(String.format("Monto proporcionado: $%.2f\n", montoProporcionado));
    nota.append(String.format("Cambio: $%.2f\n", cambio));
    nota.append("----------------------------------------------------------\n");

    String formaPago = (String) comboMetodoPago.getSelectedItem();
    nota.append(String.format("Formas de pago: %s\n", formaPago));
    nota.append("----------------------------------------------------------\n");

    JOptionPane.showMessageDialog(null, nota.toString());

    try (FileWriter writer = new FileWriter("NotaDeVenta.txt", true)) {
        writer.write(nota.toString());
        writer.write(System.lineSeparator());
        writer.flush();
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar la nota: " + e.getMessage());
    }

    // Preguntar si se quiere enviar la nota por correo
    int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea enviar la nota de venta por correo electrónico?", "Enviar Nota", JOptionPane.YES_NO_OPTION);

    if (respuesta == JOptionPane.YES_OPTION) {
        // Convertir la nota a PDF
        String pdfPath = "NotaDeVenta.pdf";
        generarPDF(pdfPath, nota.toString()); // Generar el PDF con el contenido de la nota

        // Solicitar el correo al cual enviar el archivo PDF
        String correoDestinatario = JOptionPane.showInputDialog(this, "Ingrese el correo electrónico del destinatario:", "Correo Electrónico", JOptionPane.PLAIN_MESSAGE);
        
        if (correoDestinatario != null && !correoDestinatario.trim().isEmpty()) {
            // Enviar el correo con el archivo PDF adjunto
            enviarCorreo(correoDestinatario, pdfPath);
        } else {
            JOptionPane.showMessageDialog(this, "El correo electrónico ingresado no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

    
    private void generarPDF(String nombreArchivo, String contenido) {
    com.itextpdf.text.Document documento = new com.itextpdf.text.Document();
    try {
        PdfWriter.getInstance(documento, new FileOutputStream(nombreArchivo));
        documento.open();
        documento.add(new Paragraph(contenido));
        System.out.println("PDF generado exitosamente: " + nombreArchivo);
    } catch (FileNotFoundException e) {
        JOptionPane.showMessageDialog(this, "Error al generar el PDF: Archivo no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (DocumentException e) {
        JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        documento.close();
    }
}*/
    private void generarNotaDeVenta(int[] transactionIds, double montoProporcionado, double totalPagar) {
        if (jTable1 == null || jTable1.getModel() == null) {
            JOptionPane.showMessageDialog(this, "Error: La tabla no está inicializada.");
            return;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fechaActual = sdf.format(new Date());
        String emailCajero = obtenerEmailCajero(idCajero);
        StringBuilder nota = new StringBuilder();
        nota.append("NOTA DE VENTA\n");
        nota.append("Fecha: ").append(fechaActual).append("\n");
        nota.append("Email del Cajero: ").append(emailCajero).append("\n");
        nota.append("----------------------------------------------------------\n");
        nota.append(String.format("%-10s %-15s %-6s %-10s %-10s %-10s\n", "MODELO", "MARCA", "CANT", "PRECIO U.", "TOTAL", "TICKET ID"));

        DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel();
        double sumaTotal = 0;

        for (int i = 0; i < modeloTabla.getRowCount(); i++) {
            String modelo = safeGetString(modeloTabla, i, 1);
            String marca = safeGetString(modeloTabla, i, 2);
            Integer cantidad = safeGetInteger(modeloTabla, i, 3);
            Double precio = safeGetDouble(modeloTabla, i, 4);
            if (modelo == null || marca == null || cantidad == null || precio == null) {
                continue;
            }
            double total = cantidad * precio;
            sumaTotal += total;
            nota.append(String.format("%-14s %-17s %-10d %-10.2f %-15.2f %-10d\n", modelo, marca, cantidad, precio, total, transactionIds[i]));
        }

        double cambio = montoProporcionado - totalPagar;

        nota.append("----------------------------------------------------------\n");
        nota.append(String.format("Total a pagar: $%.2f\n", sumaTotal));
        nota.append(String.format("Monto proporcionado: $%.2f\n", montoProporcionado));
        nota.append(String.format("Cambio: $%.2f\n", cambio));
        nota.append("----------------------------------------------------------\n");

        String formaPago = (String) comboMetodoPago.getSelectedItem();
        nota.append(String.format("Formas de pago: %s\n", formaPago));
        nota.append("----------------------------------------------------------\n");

        JOptionPane.showMessageDialog(null, nota.toString());

        try (FileWriter writer = new FileWriter("NotaDeVenta.txt", true)) {
            writer.write(nota.toString());
            writer.write(System.lineSeparator());
            writer.flush();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar la nota: " + e.getMessage());
        }

        // Preguntar si se quiere enviar la nota por correo
        int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea enviar la nota de venta por correo electrónico?", "Enviar Nota", JOptionPane.YES_NO_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            // Generar un nombre único para el archivo PDF
            String pdfPath = generarNombreUnico("NotaDeVenta", ".pdf");
            generarPDF(pdfPath, nota.toString()); // Generar el PDF con el contenido de la nota

            // Solicitar el correo al cual enviar el archivo PDF
            String correoDestinatario = JOptionPane.showInputDialog(this, "Ingrese el correo electrónico del destinatario:", "Correo Electrónico", JOptionPane.PLAIN_MESSAGE);

            if (correoDestinatario != null && !correoDestinatario.trim().isEmpty()) {
                enviarCorreo(correoDestinatario, pdfPath); // Enviar el PDF generado
            } else {
                JOptionPane.showMessageDialog(this, "El correo electrónico ingresado no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void generarPDF(String nombreArchivo, String contenido) {
        com.itextpdf.text.Document documento = new com.itextpdf.text.Document();
        try {
            PdfWriter.getInstance(documento, new FileOutputStream(nombreArchivo));
            documento.open();
            documento.add(new Paragraph(contenido));
            System.out.println("PDF generado exitosamente: " + nombreArchivo);
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF: Archivo no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (DocumentException e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            documento.close();
        }
    }

// Método para generar un nombre único para el archivo
    private String generarNombreUnico(String baseName, String extension) {
        int contador = 1;
        String nombreArchivo;
        do {
            nombreArchivo = baseName + "(" + contador + ")" + extension;
            contador++;
        } while (new File(nombreArchivo).exists());
        return nombreArchivo;
    }

    /*
private void generarPDF(String nombreArchivo, String contenido) {
    // Crear el objeto Document que representa el documento PDF
    Document documento = new Document();
    
    try {
        // Crear un escritor de PDF, asociando el documento a un archivo
        PdfWriter.getInstance(documento, new FileOutputStream(nombreArchivo));

        // Abrir el documento para agregar contenido
        documento.open();

        // Agregar contenido al documento
        documento.add(new Paragraph(contenido));

        System.out.println("PDF generado exitosamente: " + nombreArchivo);
    } catch (FileNotFoundException e) {
        JOptionPane.showMessageDialog(this, "Error al generar el PDF: Archivo no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Cerrar el documento
        documento.close();
    }
}*/
    private void enviarCorreo(String destinatario, String archivoPdf) {
        if (destinatario == null || destinatario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El correo del destinatario está vacío.");
            return;
        }

        final String remitente = "zapateriachedys@gmail.com"; // Correo del remitente
        final String clave = "uixs weet dppp rvcw"; // Contraseña generada de aplicación

        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");

        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(remitente, clave);
            }
        });

        try {
            // Crear el mensaje
            Message mensaje = new MimeMessage(session);
            mensaje.setFrom(new InternetAddress(remitente));
            mensaje.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
            mensaje.setSubject("Nota de Venta");

            // Crear cuerpo del mensaje
            MimeBodyPart texto = new MimeBodyPart();
            texto.setText("Estimado cliente,\n\nSe adjunta la nota de venta en formato PDF.");

            // Crear adjunto
            MimeBodyPart adjunto = new MimeBodyPart();
            adjunto.attachFile(archivoPdf);

            // Combinar texto y adjunto
            Multipart multiParte = new MimeMultipart();
            multiParte.addBodyPart(texto);
            multiParte.addBodyPart(adjunto);

            mensaje.setContent(multiParte);

            // Enviar el mensaje
            Transport.send(mensaje);
            JOptionPane.showMessageDialog(this, "Correo enviado exitosamente a: " + destinatario, "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (MessagingException | java.io.IOException e) {
            JOptionPane.showMessageDialog(this, "Error al enviar el correo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

// Helper methods to safely get values from table and handle null
    private String safeGetString(DefaultTableModel model, int row, int col) {
        Object value = model.getValueAt(row, col);
        return value != null ? value.toString() : null;
    }

    private Integer safeGetInteger(DefaultTableModel model, int row, int col) {
        Object value = model.getValueAt(row, col);
        return value instanceof Integer ? (Integer) value : null;
    }

    private Double safeGetDouble(DefaultTableModel model, int row, int col) {
        Object value = model.getValueAt(row, col);
        return value instanceof Double ? (Double) value : null;
    }

    private void guardarNotaEnArchivo(String nota) {
        try (FileWriter writer = new FileWriter("NotaDeVenta.txt", true)) { // true para append
            writer.write(nota);
            writer.write(System.lineSeparator());
            writer.flush();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar la nota: " + e.getMessage());
        }
    }

    private int insertarTransaccion(String modelo, double precio, int cantidad, String formaPago, int idCajero, double total, Connection conn) throws SQLException {
        String sql = "INSERT INTO transacciones (modelo, precio, cantidad, forma_pago, id_cajero, total, fecha_hora) VALUES (?, ?, ?, ?, ?, ?, NOW())";
        try (PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, modelo);
            pstmt.setDouble(2, precio);
            pstmt.setInt(3, cantidad);
            pstmt.setString(4, formaPago);
            pstmt.setInt(5, idCajero);
            pstmt.setDouble(6, total);

            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Crear transacción falló, ninguna fila afectada.");
            }

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Crear transacción falló, no se obtuvo el ID.");
                }
            }
        }
    }

    private String obtenerEmailCajero(int idCajero) {
        String emailCajero = "Email no encontrado"; // Valor por defecto
        String sql = "SELECT email FROM cajeros WHERE id = ?";

        try {
            Connection conn = Conexion.getInstance().getConnection();
            if (conn == null || conn.isClosed()) {
                Conexion.getInstance().reconnect();
            }
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, idCajero);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                emailCajero = rs.getString("email");
            }
            rs.close();
            pstmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al consultar el email del cajero: " + e.getMessage());
        }
        return emailCajero;
    }

    private void realizarCorteCaja(String fecha) {
        try {
            Connection conn = Conexion.getInstance().getConnection();
            if (conn == null || conn.isClosed()) {
                Conexion.getInstance().reconnect();
            }

            String sql = "SELECT forma_pago, SUM(total) as totalPorFormaPago FROM transacciones WHERE DATE(fecha_hora) = ? GROUP BY forma_pago";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, fecha);
            ResultSet rs = pstmt.executeQuery();

            double totalEfectivo = 0;
            double totalTarjetaCredito = 0;
            double totalTarjetaDebito = 0;
            double totalOtrasFormas = 0;
            double totalVentas = 0;

            while (rs.next()) {
                String formaPago = rs.getString("forma_pago");
                double totalPorFormaPago = rs.getDouble("totalPorFormaPago");

                switch (formaPago.toLowerCase()) {
                    case "efectivo":
                        totalEfectivo += totalPorFormaPago;
                        break;
                    case "tarjeta de credito":
                        totalTarjetaCredito += totalPorFormaPago;
                        break;
                    case "tarjeta de debito":
                        totalTarjetaDebito += totalPorFormaPago;
                        break;
                    default:
                        totalOtrasFormas += totalPorFormaPago;
                        break;
                }

                totalVentas += totalPorFormaPago;
            }

            String mensaje = String.format(
                    "Corte de Caja del día %s:\n\n"
                    + "Total en Efectivo: $%.2f\n"
                    + "Total en Tarjeta de Crédito: $%.2f\n"
                    + "Total en Tarjeta de Débito: $%.2f\n"
                    + "Total en Otras Formas de Pago: $%.2f\n\n"
                    + "Total de Ventas: $%.2f",
                    fecha, totalEfectivo, totalTarjetaCredito, totalTarjetaDebito, totalOtrasFormas, totalVentas
            );

            JOptionPane.showMessageDialog(this, mensaje);

            rs.close();
            pstmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al realizar el corte de caja: " + e.getMessage());
        }
    }

    private void cargarTransaccionesEnTabla() {
        String sql = "SELECT * FROM transacciones"; // Ajusta la consulta según tu esquema de base de datos
        try (Connection conn = Conexion.getInstance().getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql); ResultSet rs = pstmt.executeQuery()) {

            DefaultTableModel modeloTabla = (DefaultTableModel) jTable2.getModel();
            modeloTabla.setRowCount(0); // Limpia la tabla antes de cargar los datos

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id"), // Ajusta según las columnas de tu tabla de transacciones
                    rs.getString("modelo"),
                    rs.getDouble("precio"),
                    rs.getInt("cantidad"),
                    rs.getString("forma_pago"),
                    rs.getInt("id_cajero"),
                    rs.getDouble("total"),
                    rs.getTimestamp("fecha_hora") // Ajusta según las columnas de tu tabla de transacciones
                };
                modeloTabla.addRow(row);
            }

            modeloTabla.fireTableDataChanged(); // Notifica a la JTable que los datos han cambiado
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar transacciones: " + e.getMessage());
        }
    }

    private void realizarCorteCaja1(String fecha) {
        try {
            Connection conn = Conexion.getInstance().getConnection();
            if (conn == null || conn.isClosed()) {
                Conexion.getInstance().reconnect();
                conn = Conexion.getInstance().getConnection();
                if (conn == null || conn.isClosed()) {
                    throw new SQLException("No se pudo reconectar a la base de datos.");
                }
            }

            String sql = "SELECT forma_pago, SUM(total) as totalPorFormaPago FROM transacciones WHERE DATE(fecha_hora) = ? GROUP BY forma_pago";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, fecha);
            ResultSet rs = pstmt.executeQuery();

            double totalEfectivo = 0;
            double totalTarjetaCredito = 0;
            double totalTarjetaDebito = 0;
            double totalOtrasFormas = 0;
            double totalVentas = 0;

            while (rs.next()) {
                String formaPago = rs.getString("forma_pago");
                double totalPorFormaPago = rs.getDouble("totalPorFormaPago");

                switch (formaPago.toLowerCase()) {
                    case "efectivo":
                        totalEfectivo += totalPorFormaPago;
                        break;
                    case "tarjeta de credito":
                        totalTarjetaCredito += totalPorFormaPago;
                        break;
                    case "tarjeta de debito":
                        totalTarjetaDebito += totalPorFormaPago;
                        break;
                    default:
                        totalOtrasFormas += totalPorFormaPago;
                        break;
                }

                totalVentas += totalPorFormaPago;
            }

            // Actualiza los campos de texto en la pestaña de corte de caja con el signo de dólar
            Efectivo.setText(String.format("$%.2f", totalEfectivo));
            TraCredito.setText(String.format("$%.2f", totalTarjetaCredito));
            TarDebito.setText(String.format("$%.2f", totalTarjetaDebito));
            OtraPago.setText(String.format("$%.2f", totalOtrasFormas));
            TotalVentas.setText(String.format("$%.2f", totalVentas));

            rs.close();
            pstmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al realizar el corte de caja: " + e.getMessage());
        }
    }

    private int generarIdTransaccionPrincipal() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int generatedId = -1;
        try {
            conn = con1.getConnection();
            String sql = "INSERT INTO transaccion_principal (fecha_hora) VALUES (NOW())"; // Asegúrate de tener esta tabla en tu base de datos
            pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Crear transacción principal falló, ninguna fila afectada.");
            }
            rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                generatedId = rs.getInt(1);
            }
            return generatedId;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al generar el ID de transacción principal: " + e.getMessage());
            return -1;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + ex.getMessage());
            }
        }
    }

    private int getNextTransactionId(Connection conn) throws SQLException {
        String getMaxIdSql = "SELECT COALESCE(MAX(id), 0) + 1 FROM transacciones";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(getMaxIdSql)) {
            if (rs.next()) {
                return rs.getInt(1);
            } else {
                throw new SQLException("No se pudo obtener el próximo ID de transacción.");
            }
        }
    }

    private void realizarDevolucion(int transactionId, int cantidadDevolver) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = Conexion.getInstance().getConnection();
            if (conn == null || conn.isClosed()) {
                Conexion.getInstance().reconnect();
                conn = Conexion.getInstance().getConnection();
                if (conn == null || conn.isClosed()) {
                    throw new SQLException("No se pudo reconectar a la base de datos.");
                }
            }

            // Verificar si la transacción existe y obtener detalles
            String sql = "SELECT modelo, cantidad, precio, fecha_hora FROM transacciones WHERE id = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, transactionId);
            rs = pstmt.executeQuery();

            if (!rs.next()) {
                throw new SQLException("Transacción no encontrada.");
            }

            String modelo = rs.getString("modelo");
            int cantidadOriginal = rs.getInt("cantidad");
            double precio = rs.getDouble("precio");
            Date fechaHoraTransaccion = rs.getTimestamp("fecha_hora");

            // Verificar si han pasado menos de 5 días
            Date fechaActual = new Date();
            long diffInMillies = Math.abs(fechaActual.getTime() - fechaHoraTransaccion.getTime());
            long diffInDays = diffInMillies / (1000 * 60 * 60 * 24);

            if (diffInDays > 5) {
                throw new SQLException("La devolución no se puede realizar porque han pasado más de 5 días desde la transacción.");
            }

            if (cantidadDevolver > cantidadOriginal) {
                throw new SQLException("La cantidad a devolver excede la cantidad comprada.");
            }

            // Iniciar una transacción
            conn.setAutoCommit(false);

            // Registrar la devolución en la tabla de devoluciones
            sql = "INSERT INTO devoluciones (id_transaccion, modelo, cantidad, precio, fecha_hora) VALUES (?, ?, ?, ?, NOW())";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, transactionId);
            pstmt.setString(2, modelo);
            pstmt.setInt(3, cantidadDevolver);
            pstmt.setDouble(4, precio);
            pstmt.executeUpdate();

            // Actualizar la transacción para reflejar la devolución
            int nuevaCantidad = cantidadOriginal - cantidadDevolver;
            if (nuevaCantidad == 0) {
                // Actualizar la transacción si toda la cantidad es devuelta
                sql = "UPDATE transacciones SET cantidad = ?, total = ? WHERE id = ?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, 0);
                pstmt.setDouble(2, 0.0);
                pstmt.setInt(3, transactionId);
            } else {
                // Actualizar la cantidad si solo una parte es devuelta
                sql = "UPDATE transacciones SET cantidad = ?, total = ? WHERE id = ?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, nuevaCantidad);
                pstmt.setDouble(2, nuevaCantidad * precio);
                pstmt.setInt(3, transactionId);
            }
            pstmt.executeUpdate();

            // Devolver el stock
            sql = "UPDATE Zapato SET Cantidad = Cantidad + ? WHERE Modelo = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, cantidadDevolver);
            pstmt.setString(2, modelo);
            pstmt.executeUpdate();

            // Confirmar la transacción
            conn.commit();

            JOptionPane.showMessageDialog(this, "Devolución realizada con éxito.");
            //cargarDevolucionesEnTabla(); // Actualizar la tabla de devoluciones

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback(); // Revertir los cambios en caso de error
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "ALgo paso");
            }
            JOptionPane.showMessageDialog(this, "" + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al cerrar la conexión: " + ex.getMessage());
            }
        }
    }

    /*private void cargarDevolucionesEnTabla() {
    String sql = "SELECT * FROM devoluciones";
    try (Connection conn = Conexion.getInstance().getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {
        
        DefaultTableModel modeloTabla = (DefaultTableModel) jTable3.getModel();
        modeloTabla.setRowCount(0); // Limpia la tabla antes de cargar los datos

        while (rs.next()) {
            Object[] row = {
                rs.getInt("id"),
                rs.getInt("id_transaccion"),
                rs.getString("modelo"),
                rs.getInt("cantidad"),
                rs.getDouble("precio"),
                rs.getTimestamp("fecha_hora")
            };
            modeloTabla.addRow(row);
        }

        modeloTabla.fireTableDataChanged(); // Notifica a la JTable que los datos han cambiado
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar devoluciones: " + e.getMessage());
    }
}*/
    private void verificarInventario() {
        String query = "SELECT Modelo, Cantidad FROM zapato";
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            connection = con1.getConnection();
            if (connection == null || connection.isClosed()) {
                con1.reconnect();
                connection = con1.getConnection();
            }

            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                String modelo = resultSet.getString("Modelo");
                int cantidad = resultSet.getInt("Cantidad");

                // Aquí asumimos que el umbral es 5, puedes ajustarlo según tus necesidades
                int umbral = 5;

                if (cantidad <= umbral) {
                    enviarAlerta(modelo, cantidad);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void enviarAlerta(String modelo, int cantidad) {
        int respuesta = JOptionPane.showConfirmDialog(null, "El nivel de inventario del modelo " + modelo + " es bajo. Cantidad actual: " + cantidad + ".\n¿Desea realizar la automatización de reabastecimiento?", "Alerta de Inventario Bajo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (respuesta == JOptionPane.YES_OPTION) {
            // Automatización de reabastecimiento
            reabastecerProducto(modelo);
        } else {
            JOptionPane.showMessageDialog(null, "No se realizó la automatización de reabastecimiento para el modelo " + modelo + ".", "Automatización Cancelada", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void iniciarMonitoreoInventario() {
        timer = new Timer(true);
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                verificarInventario();
            }
        }, 0, 60000); // Monitoreo cada minuto
    }

    public void generarReporteZapatosVendidos() {
        String query = "SELECT modelo, SUM(cantidad) as total_vendido FROM transacciones GROUP BY modelo ORDER BY total_vendido DESC";
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            connection = con1.getConnection();
            if (connection == null || connection.isClosed()) {
                con1.reconnect();
                connection = con1.getConnection();
            }

            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            DefaultTableModel modeloTabla = (DefaultTableModel) jTable4.getModel();
            modeloTabla.setRowCount(0); // Limpia la tabla antes de cargar los datos

            while (resultSet.next()) {
                String modelo = resultSet.getString("modelo");
                int totalVendido = resultSet.getInt("total_vendido");
                modeloTabla.addRow(new Object[]{modelo, totalVendido});
            }

            modeloTabla.fireTableDataChanged(); // Notifica a la JTable que los datos han cambiado
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al generar el reporte de zapatos vendidos: " + e.getMessage());
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void reabastecerProducto(String modelo) {
        // Cantidad a reabastecer, puedes ajustar este valor según tus necesidades
        int cantidadReabastecer = 50;

        String sql = "UPDATE Zapato SET Cantidad = Cantidad + ? WHERE Modelo = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        try {
            conn = Conexion.getInstance().getConnection(); // Obtiene la conexión
            if (conn == null || conn.isClosed()) { // Verifica si la conexión está cerrada
                JOptionPane.showMessageDialog(this, "Error: La conexión con la base de datos está cerrada. Intentando reconectar...");
                Conexion.getInstance().reconnect(); // Intenta reconectar
                conn = Conexion.getInstance().getConnection(); // Obtiene la nueva conexión
                if (conn == null || conn.isClosed()) { // Verifica nuevamente si la conexión está cerrada
                    throw new SQLException("No se pudo reconectar a la base de datos.");
                }
            }
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, cantidadReabastecer);
            pstmt.setString(2, modelo);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Reabastecimiento falló, ninguna fila afectada.");
            } else {
                JOptionPane.showMessageDialog(this, "Reabastecimiento automático realizado para el modelo " + modelo + ". Cantidad reabastecida: " + cantidadReabastecer);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al reabastecer el producto: " + e.getMessage());
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close(); // Cierra el PreparedStatement si no es null
                }
                if (conn != null && !conn.isClosed()) {
                    conn.close(); // Cierra la conexión si no es null y está abierta
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }

    private void cargarTransaccionesEnTablaPorFecha() {
        Date selectedDate = jDateChooser2.getDate();
        if (selectedDate == null) {
            JOptionPane.showMessageDialog(this, "No se seleccionó ninguna fecha.");
            return;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaSeleccionada = sdf.format(selectedDate);

        String sql = "SELECT * FROM transacciones WHERE DATE(fecha_hora) = ?";
        try (Connection conn = Conexion.getInstance().getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, fechaSeleccionada);
            try (ResultSet rs = pstmt.executeQuery()) {
                DefaultTableModel modeloTabla = (DefaultTableModel) jTable2.getModel();
                modeloTabla.setRowCount(0); // Limpia la tabla antes de cargar los datos

                while (rs.next()) {
                    Object[] row = {
                        rs.getInt("id"),
                        rs.getString("modelo"),
                        rs.getDouble("precio"),
                        rs.getInt("cantidad"),
                        rs.getString("forma_pago"),
                        rs.getInt("id_cajero"),
                        rs.getDouble("total"),
                        rs.getTimestamp("fecha_hora")
                    };
                    modeloTabla.addRow(row);
                }

                modeloTabla.fireTableDataChanged(); // Notifica a la JTable que los datos han cambiado
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar transacciones: " + e.getMessage());
        }
    }

    private void buscarModelosMasVendidos() {
        conet = con1.getConnection();

        int mes = jMonthChooser1.getMonth() + 1; // jMonthChooser devuelve 0 para enero, sumamos 1 para que coincida con el formato de SQL
        int año = jYearChooser1.getYear();

        String sql = "SELECT modelo, SUM(cantidad) as total_vendido "
                + "FROM transacciones "
                + "WHERE MONTH(fecha_hora) = ? AND YEAR(fecha_hora) = ? "
                + "GROUP BY modelo "
                + "ORDER BY total_vendido DESC";

        try {
            PreparedStatement statement = conet.prepareStatement(sql);
            statement.setInt(1, mes);
            statement.setInt(2, año);
            ResultSet result = statement.executeQuery();
            DefaultTableModel modelo = (DefaultTableModel) jTable4.getModel();
            modelo.setRowCount(0);  // Limpiar la tabla

            // Rellenar la tabla con los resultados de la consulta
            while (result.next()) {
                Object[] row = {
                    result.getString("modelo"),
                    result.getInt("total_vendido")
                };
                modelo.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int idCajero = 1; // ID de cajero predeterminado o obtenido de alguna manera
                new Cajero(idCajero).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Añadir;
    private javax.swing.JComboBox<String> BCalzado;
    private javax.swing.JTextField BCantidad;
    private javax.swing.JTextField BCodigo;
    private javax.swing.JTextField BColor;
    private javax.swing.JTextField BMarca;
    private javax.swing.JTextField BModelo;
    private javax.swing.JTextField BPrecio;
    private javax.swing.JTextField BTalla;
    private javax.swing.JButton Buscar;
    private javax.swing.JButton Buscar1;
    private javax.swing.JTextField Cantidad;
    private javax.swing.JButton CorteCaja;
    private javax.swing.JTextField DiaCorteCaja;
    private javax.swing.JTextField Efectivo;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Limpiar;
    private javax.swing.JTextField Marca;
    private javax.swing.JTextField Modelo;
    private javax.swing.JTextField MontoProporcionado;
    private javax.swing.JTextField OtraPago;
    private javax.swing.JTextField Precio;
    private javax.swing.JTextField StockDisponible;
    private javax.swing.JTable TablaZapatos;
    private javax.swing.JTextField TarDebito;
    private javax.swing.JTextField TotalPagar;
    private javax.swing.JTextField TotalVentas;
    private javax.swing.JTextField TraCredito;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btnDevolucion;
    private javax.swing.JButton btnGenerarVenta;
    private javax.swing.JComboBox<String> comboMetodoPago;
    private javax.swing.JLabel eti1;
    private javax.swing.JLabel eti2;
    private javax.swing.JLabel eti3;
    private javax.swing.JLabel eti4;
    private javax.swing.JTextField idZapato;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JTextField txtCantidadDevolver;
    private javax.swing.JTextField txtTransaccionID;
    // End of variables declaration//GEN-END:variables
}
