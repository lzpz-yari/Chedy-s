/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Controlador.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pedro
 */
public class UsuariosCajeros extends javax.swing.JFrame {

    Conexion con1 = Conexion.getInstance();
    Connection conet;
    DefaultTableModel modelo;

    /**
     * Creates new form UsuariosCajeros
     */
    public UsuariosCajeros() {
        initComponents();
        conet = con1.getConnection(); // Inicializar conet con la conexión obtenida de la instancia de Conexion
        consultarCredenciales(); // Llamar al método que consulta las credenciales y actualiza la tabla
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CamposCredenciales = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btBaja = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        CamposCredenciales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Email", "Contraseña"
            }
        ));
        CamposCredenciales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CamposCredencialesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CamposCredenciales);

        jButton2.setText("Regresar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btBaja.setBackground(new java.awt.Color(204, 204, 204));
        btBaja.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btBaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/cancelar.png"))); // NOI18N
        btBaja.setText("Eliminar");
        btBaja.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(50, 43, 44), null, null));
        btBaja.setBorderPainted(false);
        btBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBajaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(186, 186, 186)
                        .addComponent(jButton2)
                        .addGap(191, 191, 191))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(btBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Administradorr admi = new Administradorr();
        admi.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBajaActionPerformed
        // Obtener la fila seleccionada en la tabla de credenciales
        int filaSeleccionada = CamposCredenciales.getSelectedRow();

// Verificar si se ha seleccionado una fila válida
        if (filaSeleccionada != -1) {
            // Obtener los datos del registro seleccionado
            String emailAEliminar = (String) CamposCredenciales.getValueAt(filaSeleccionada, 0);
            String contraseñaAEliminar = (String) CamposCredenciales.getValueAt(filaSeleccionada, 1);

            // Construir un mensaje de confirmación con los datos del registro seleccionado
            String mensajeConfirmacion = "¿Estás seguro de que deseas eliminar : " + emailAEliminar + "?";

            // Mostrar un cuadro de diálogo de confirmación
            int confirmacion = JOptionPane.showConfirmDialog(null, mensajeConfirmacion, "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            // Si el usuario confirma la eliminación, proceder con la eliminación del registro
            if (confirmacion == JOptionPane.YES_OPTION) {
                // Construir la sentencia SQL para eliminar el registro que coincida con los datos seleccionados
                String sql = "DELETE FROM cajeros WHERE Email = ? AND Contrasena = ?";

                try {
                    // Crear una sentencia preparada con la consulta SQL
                    PreparedStatement statement = conet.prepareStatement(sql);

                    // Establecer los parámetros para los datos del registro que deseas eliminar
                    statement.setString(1, emailAEliminar);
                    statement.setString(2, contraseñaAEliminar);

                    // Ejecutar la sentencia SQL para eliminar el registro
                    int filasAfectadas = statement.executeUpdate();

                    // Verificar si se eliminó el registro exitosamente
                    if (filasAfectadas > 0) {
                        // Eliminar el registro seleccionado de la tabla
                        DefaultTableModel modelo = (DefaultTableModel) CamposCredenciales.getModel();
                        modelo.removeRow(filaSeleccionada);

                        // Mostrar un mensaje de éxito
                        JOptionPane.showMessageDialog(null, "Credenciales eliminadas correctamente.");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar las credenciales.");
                    }
                } catch (SQLException e) {
                    // Manejar cualquier excepción que ocurra durante la ejecución de la consulta SQL
                    JOptionPane.showMessageDialog(null, "Error al eliminar las credenciales: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione unas credenciales para eliminar.");
        }


    }//GEN-LAST:event_btBajaActionPerformed

    private void CamposCredencialesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CamposCredencialesMouseClicked
     
    }//GEN-LAST:event_CamposCredencialesMouseClicked

    private void consultarCredenciales() {
        try {
            // Crear la consulta SQL para obtener las credenciales de la tabla 'cajeros'
            String sql = "SELECT Email, Contrasena FROM cajeros";

            // Preparar la declaración SQL
            PreparedStatement statement = conet.prepareStatement(sql);

            // Ejecutar la consulta
            ResultSet result = statement.executeQuery();

            // Crear un modelo de tabla para almacenar los datos
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Email");
            model.addColumn("Contraseña");

            // Iterar sobre los resultados de la consulta y agregarlos al modelo de la tabla
            while (result.next()) {
                String email = result.getString("Email");
                String contraseña = result.getString("Contrasena");
                model.addRow(new Object[]{email, contraseña});
            }
            // Establecer el modelo de la tabla con los datos obtenidos
            CamposCredenciales.setModel(model);
// Permitir la selección de filas
            CamposCredenciales.setRowSelectionAllowed(true);

            // Establecer el modelo de la tabla con los datos obtenidos
            CamposCredenciales.setModel(model);

        } catch (SQLException e) {
            // Manejar cualquier excepción que ocurra durante la ejecución de la consulta SQL
            JOptionPane.showMessageDialog(null, "Error al ejecutar la consulta: " + e.getMessage());
        }
    }
    ///int filaSeleccionada = tablaEmpleados.getSelectedRow();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsuariosCajeros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsuariosCajeros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsuariosCajeros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsuariosCajeros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsuariosCajeros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CamposCredenciales;
    private javax.swing.JButton btBaja;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
