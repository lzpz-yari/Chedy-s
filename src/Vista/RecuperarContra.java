/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import javax.mail.*;
import javax.mail.internet.*;
import java.io.FileOutputStream;
import java.util.Properties;
import Controlador.Conexion;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;

/**
 *
 * @author pedro
 */
public class RecuperarContra extends javax.swing.JFrame {

    Conexion con1 = Conexion.getInstance();
    Connection conet;
    private String correoEmpleado;

    /**
     * Creates new form Credenciales
     */
    public RecuperarContra(String correoEmpleado) {
        initComponents();
        this.correoEmpleado = correoEmpleado;
        conet = con1.getConnection(); // Inicializar conet con la conexión obtenida de la instancia de Conexion
        // Llamar al método que realiza la consulta a la base de datos con el correo recibido

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Recuperar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabel2.setBackground(new java.awt.Color(255, 255, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Ingresa tu RFC");

        Recuperar.setBackground(new java.awt.Color(204, 204, 204));
        Recuperar.setText("Recuperar");
        Recuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecuperarActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(83, 182, 81));
        jButton1.setText("Atras");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/clave-correo.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Recuperacion de contraseña");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(178, 178, 178))))
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(Recuperar)
                            .addGap(145, 145, 145))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(jLabel4)
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(Recuperar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(32, 32, 32))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void RecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecuperarActionPerformed
        /*String empleadoId = jTextField1.getText().trim(); // Obtiene el ID desde el campo de texto
        if (empleadoId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Por favor, ingrese el RFC del empleado.</span></html>", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            String sql = "SELECT c.Contrasena FROM cajeros c JOIN empleado e ON c.EmpleadoID = e.RFC WHERE e.RFC = ?";
            PreparedStatement statement = conet.prepareStatement(sql);
            statement.setString(1, empleadoId); // Asumiendo que el ID es numérico

            ResultSet result = statement.executeQuery();
            if (result.next()) {
                String contraseña = result.getString("Contrasena");
                JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>La contraseña del empleado es:</span> <span style='color:blue; font-weight:bold;'>" + contraseña + "</span></html>", "Información", JOptionPane.INFORMATION_MESSAGE);

                // Pregunta si quiere cambiar la contraseña
                int respuesta = JOptionPane.showConfirmDialog(this, "<html><span style='font-size:12px;'>¿Desea cambiar la contraseña?</span></html>", "Confirmar Cambio", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (respuesta == JOptionPane.YES_OPTION) {
                    cambiarContraseña(empleadoId,correoEmpleado); // Método para cambiar la contraseña
                }
            } else {
                JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>No se encontró un cajero con el ID proporcionado.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Error al recuperar la contraseña:</span> <span style='color:red;'>" + e.getMessage() + "</span></html>", "Error SQL", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>El ID del empleado debe ser numérico.</span></html>", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        }*/
         String empleadoId = jTextField1.getText().trim(); // Obtiene el ID desde el campo de texto
    if (empleadoId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Por favor, ingrese un ID de empleado.</span></html>", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Consulta para obtener la contraseña y el correo del empleado
        String sql = "SELECT c.Contrasena, e.Correo FROM cajeros c JOIN empleado e ON c.EmpleadoID = e.RFC WHERE e.RFC = ?";
        PreparedStatement statement = conet.prepareStatement(sql);
        statement.setString(1, empleadoId); // Establecer el RFC como parámetro en la consulta

        ResultSet result = statement.executeQuery();
        if (result.next()) {
            String contraseña = result.getString("Contrasena");
            String correoEmpleado = result.getString("Correo");

            // Mostrar la contraseña al usuario
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>La contraseña del empleado es:</span> <span style='color:blue; font-weight:bold;'>" + contraseña + "</span></html>", "Información", JOptionPane.INFORMATION_MESSAGE);

            // Enviar la contraseña por correo utilizando el método enviarCorreo
            enviarCorreo(correoEmpleado, contraseña);

            // Preguntar si se desea cambiar la contraseña
            int respuesta = JOptionPane.showConfirmDialog(this, "<html><span style='font-size:12px;'>¿Desea cambiar la contraseña?</span></html>", "Confirmar Cambio", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (respuesta == JOptionPane.YES_OPTION) {
                cambiarContraseña(empleadoId, correoEmpleado); // Método para cambiar la contraseña (debes implementar este método)
            }
        } else {
            // Si no se encuentra un resultado para el RFC ingresado
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>No se encontró un cajero con el ID proporcionado.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        // Manejo de errores SQL
        JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Error al recuperar la contraseña:</span> <span style='color:red;'>" + e.getMessage() + "</span></html>", "Error SQL", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_RecuperarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    /* private void cambiarContraseña(String empleadoId) {
        String nuevaContraseña = JOptionPane.showInputDialog(this, "<html><span style='font-size:12px;'>Ingrese la nueva contraseña:</span></html>", "Nueva Contraseña", JOptionPane.PLAIN_MESSAGE);
        if (nuevaContraseña != null && !nuevaContraseña.trim().isEmpty()) {
            try {
                // Primero, obtenemos el correo del empleado desde la base de datos
                String correoEmpleado = obtenerCorreoEmpleado(empleadoId);
                if (correoEmpleado == null) {
                    JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>No se encontró el correo del empleado.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Actualizamos la contraseña en la base de datos
                String sql = "UPDATE cajeros SET Contrasena = ? WHERE EmpleadoID = ?";
                PreparedStatement statement = conet.prepareStatement(sql);
                statement.setString(1, nuevaContraseña);
                statement.setString(2, empleadoId);

                int filasActualizadas = statement.executeUpdate();
                if (filasActualizadas > 0) {
                    JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Contraseña actualizada correctamente.</span></html>", "Éxito", JOptionPane.INFORMATION_MESSAGE);

                    // Preguntar si desea enviar el correo con la nueva contraseña
                    int enviarCorreo = JOptionPane.showConfirmDialog(this, "<html><span style='font-size:12px;'>¿Desea enviar la nueva contraseña por correo?</span></html>", "Enviar Correo", JOptionPane.YES_NO_OPTION);
                    if (enviarCorreo == JOptionPane.YES_OPTION) {
                        enviarCorreo(correoEmpleado, nuevaContraseña); // Enviar el correo
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>No se pudo actualizar la contraseña.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Error al actualizar la contraseña:</span> <span style='color:red;'>" + e.getMessage() + "</span></html>", "Error SQL", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>La nueva contraseña no puede estar vacía.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }*/
    
    private void cambiarContraseña(String empleadoId, String correoEmpleado) {
    String nuevaContraseña = JOptionPane.showInputDialog(this, "<html><span style='font-size:12px;'>Ingrese la nueva contraseña (mínimo 8 caracteres, debe contener números y letras):</span></html>", "Nueva Contraseña", JOptionPane.PLAIN_MESSAGE);
    
    if (nuevaContraseña != null && !nuevaContraseña.trim().isEmpty()) {
        // Validación de contraseña
        if (nuevaContraseña.length() >= 8 && nuevaContraseña.matches(".*[a-zA-Z].*") && nuevaContraseña.matches(".*\\d.*")) {
            try {
                // Cambiar la contraseña en la base de datos (implementa el cambio en tu base de datos aquí)
                // Ejemplo: cambiarContraseñaEnBaseDeDatos(empleadoId, nuevaContraseña);
cambiarContraseñaEnBaseDeDatos(empleadoId, nuevaContraseña);
                // Obtener el correo del empleado
                String correo = obtenerCorreoEmpleado(empleadoId);
                if (correo != null) {
                    // Enviar correo con la nueva contraseña
                    enviarCorreo(correo, nuevaContraseña);
                }

                JOptionPane.showMessageDialog(this, "La contraseña se ha cambiado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Hubo un error al cambiar la contraseña: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "La contraseña no cumple con los requisitos de seguridad (al menos 8 caracteres, y debe contener letras y números).", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "La contraseña no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
private boolean cambiarContraseñaEnBaseDeDatos(String empleadoId, String nuevaContraseña) {
    String sql = "UPDATE cajeros SET contrasena = ? WHERE EmpleadoID = ?";
    try (PreparedStatement statement = conet.prepareStatement(sql)) {
        statement.setString(1, nuevaContraseña);
        statement.setString(2, empleadoId);
        
        int filasActualizadas = statement.executeUpdate();
        return filasActualizadas > 0; // Retorna true si al menos una fila fue actualizada
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar la contraseña en la base de datos: " + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
        return false;
    }
}
    /*private void cambiarContraseña(String empleadoId, String correoEmpleado) {
        String nuevaContraseña = JOptionPane.showInputDialog(this, "<html><span style='font-size:12px;'>Ingrese la nueva contraseña:</span></html>", "Nueva Contraseña", JOptionPane.PLAIN_MESSAGE);
        if (nuevaContraseña != null && !nuevaContraseña.trim().isEmpty()) {
            try {
                
                String sql = "UPDATE cajeros SET Contrasena = ? WHERE EmpleadoID = ?";
                PreparedStatement statement = conet.prepareStatement(sql);
                statement.setString(1, nuevaContraseña);
                statement.setString(2, empleadoId);

                int filasActualizadas = statement.executeUpdate();
                if (filasActualizadas > 0) {
                    // Mostrar mensaje de éxito
                    JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Contraseña actualizada correctamente.</span></html>", "Éxito", JOptionPane.INFORMATION_MESSAGE);

                    // Enviar el correo con la nueva contraseña
                    String asunto = "Cambio de Contraseña";
                    String mensaje = "Hola, su contraseña ha sido cambiada a: " + nuevaContraseña;
                    enviarCorreo(correoEmpleado, contraseña);
                } else {
                    JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>No se pudo actualizar la contraseña.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Error al actualizar la contraseña:</span> <span style='color:red;'>" + e.getMessage() + "</span></html>", "Error SQL", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>La nueva contraseña no puede estar vacía.</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }*/

  /*  private void enviarCorreo(String correoDestino, String asunto, String mensaje) {
        // Configuración del servidor de correo
        String host = "smtp.gmail.com";  // Puedes cambiarlo por el SMTP de tu servidor
        String usuario = "zapateriachedys@gmail.com"; // Tu correo de envío
        String contrasena = "uixs weet dppp rvcw"; // Tu contraseña de correo o contraseña de aplicación

        Properties propiedades = new Properties();
        propiedades.put("mail.smtp.host", host);
        propiedades.put("mail.smtp.port", "587");
        propiedades.put("mail.smtp.auth", "true");
        propiedades.put("mail.smtp.starttls.enable", "true");

        // Crear sesión de correo
        Session session = Session.getInstance(propiedades, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(usuario, contrasena);
            }
        });

        try {
            // Crear mensaje
            Message mensajeCorreo = new MimeMessage(session);
            mensajeCorreo.setFrom(new InternetAddress(usuario));
            mensajeCorreo.setRecipients(Message.RecipientType.TO, InternetAddress.parse(correoDestino));
            mensajeCorreo.setSubject(asunto);
            mensajeCorreo.setText(mensaje);

            // Enviar correo
            Transport.send(mensajeCorreo);
            System.out.println("Correo enviado exitosamente.");
        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
    }*/

    private String obtenerCorreoEmpleado(String empleadoId) {
        String correo = null;
        try {
            String sql = "SELECT Correo FROM empleado WHERE RFC = ?";
            PreparedStatement statement = conet.prepareStatement(sql);
            statement.setString(1, empleadoId);
            ResultSet result = statement.executeQuery();

            if (result.next()) {
                correo = result.getString("Correo");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Error al recuperar el correo:</span> <span style='color:red;'>" + e.getMessage() + "</span></html>", "Error SQL", JOptionPane.ERROR_MESSAGE);
        }
        return correo;
    }
private void generarPDF(String nombreArchivo, String contenido) {
    Document documento = new Document();
    try {
        PdfWriter.getInstance(documento, new FileOutputStream(nombreArchivo));
        documento.open();
        documento.add(new Paragraph(contenido));
        System.out.println("PDF generado exitosamente: " + nombreArchivo);
    } catch (FileNotFoundException e) {
        JOptionPane.showMessageDialog(this, "Error al generar el PDF: Archivo no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (DocumentException e) {
        JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        documento.close();
    }
}
// Método para enviar correo
  private void enviarCorreo(String destinatario, String nuevaContraseña) {
    if (destinatario == null || destinatario.isEmpty()) {
        JOptionPane.showMessageDialog(this, "El correo del destinatario está vacío.");
        return;
    }

    final String remitente = "zapateriachedys@gmail.com"; // Correo del remitente
    final String clave = "uixs weet dppp rvcw"; // Contraseña generada de aplicación

    Properties props = new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");

    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, clave);
        }
    });

    String pdfPath = "C:\\Users\\zarat\\OneDrive\\Documentos\\mañana-final\\ched\\Nueva_Contrasena.pdf";
    
    generarPDF(pdfPath, "Estimado usuario,\n\nSu nueva contraseña es: " + nuevaContraseña + "\n\nPor favor, cámbiela a la brevedad.");

    try {
        // Crear el mensaje
        Message mensaje = new MimeMessage(session);
        mensaje.setFrom(new InternetAddress(remitente));
        mensaje.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
        mensaje.setSubject("Nueva Contraseña Asignada");

        // Crear cuerpo del mensaje
        MimeBodyPart texto = new MimeBodyPart();
        texto.setText("Estimado usuario,\n\nSe adjunta un archivo PDF con su nueva contraseña.");

        // Crear adjunto
        MimeBodyPart adjunto = new MimeBodyPart();
        adjunto.attachFile(pdfPath);

        // Combinar texto y adjunto
        Multipart multiParte = new MimeMultipart();
        multiParte.addBodyPart(texto);
        multiParte.addBodyPart(adjunto);

        mensaje.setContent(multiParte);

        // Enviar el mensaje
        Transport.send(mensaje);
        JOptionPane.showMessageDialog(this, "Correo enviado exitosamente a: " + destinatario, "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (MessagingException | java.io.IOException e) {
        JOptionPane.showMessageDialog(this, "Error al enviar el correo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
/*private void enviarCorreo(String destinatario, String nuevaContraseña) {
    if (destinatario == null || destinatario.isEmpty()) {
        JOptionPane.showMessageDialog(this, "El correo del destinatario está vacío.");
        return;
    }

    final String remitente = "tu_correo@gmail.com"; // Correo del remitente
    final String clave = "tu_clave"; // Contraseña o clave de la cuenta del remitente

    Properties props = new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");

    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, clave);
        }
    });

    String pdfPath = "Nueva_Contrasena.pdf";
    generarPDF(pdfPath, "Estimado usuario,\n\nSu nueva contraseña es: " + nuevaContraseña + "\n\nPor favor, cámbiela a la brevedad.");

    try {
        // Crear el mensaje con solo el PDF adjunto
        Message mensaje = new MimeMessage(session);
        mensaje.setFrom(new InternetAddress(remitente));
        mensaje.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
        mensaje.setSubject("Nueva Contraseña Asignada");

        MimeBodyPart adjunto = new MimeBodyPart();
        adjunto.attachFile(pdfPath);

        Multipart multiParte = new MimeMultipart();
        multiParte.addBodyPart(adjunto);

        mensaje.setContent(multiParte);

        // Enviar el mensaje
        Transport.send(mensaje);
        JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Correo enviado exitosamente a:</span> <b>" + destinatario + "</b></html>", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (MessagingException | java.io.IOException e) {
        JOptionPane.showMessageDialog(this, "<html><span style='font-size:12px;'>Error al enviar el correo:</span> <span style='color:red;'>" + e.getMessage() + "</span></html>", "Error", JOptionPane.ERROR_MESSAGE);
    }
}*/

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecuperarContra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecuperarContra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecuperarContra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecuperarContra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                // Valor específico para correoEmpleado
                String rfcCajero = "RFC_DEL_CAJERO";
                new RecuperarContra(rfcCajero).setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Recuperar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
